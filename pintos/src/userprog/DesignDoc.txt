		     +--------------------------+
       	     |		    CS 140		    |
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Nicholas  Chee-Awai  <cheeawai@stanford.edu>
Elizabeth Davis      <eseraiah@stanford.edu>
J         Evans      < jevans2@stanford.edu>
            
---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct proc_args 
  {
    char *file_name_;      /* Arguments for thread_create */
    struct relation *rel;  /* Allows parent/child processes to communicate. */
  };

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We used strtok_r() in the process.c:parse_cmd_line. process_execute() passes us
a copy of the command line, so we cannibalize the copy so that we don't have to
allocate memory for another string by replacing white spaces after words with
null terminators. When we use strtok_r() to get a token, we immediately push it
onto the stack and decrement esp immediately to ensure that the elements of
argv[] are in the right order. To avoid overflowing the stack page we...

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Pintos implements strtok_r() instead of strtok() because it is thread-safe.
strtok() uses a static buffer while parsing, which is not thread-safe because
it's declared globally which means it can be overwritten by any thread.
Instead, strtok_r() requires users to create and pass in a buffer for the
function to use. 

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

1) If the user parses commands, they have more control over how it is parsed.
   Pintos always separates tokens by spaces, but there are more options for
   delimiters in the shell.
   For example, it would be hard to distinguish between 

   "f = (x + y) * z" and
   "f = x + (y * z)"

   in Pintos command line parsing, specifically because we have more
   delimiters than just white space.

2) It's easier to set up a process stack in the Unix shell because you don't
   have to parse the arguments. Instead, you can just pass the entire command
   line as a string for the user to parse at their own discretion.



			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/* Struct that the parent and child processes use to communicate with one
   another to store exit statuses, and a lock that the parent tries to acquire
   when it wants to wait on its child to exit. */ 
struct relation
  {
    tid_t c_id;                 /* Process ID of child. */
    int p_status;               /* Hold the parent's status. */
    int c_status;               /* Hold the child's status. */
    int w_status;               /* Hold the status of child on exit. */
    struct lock status_lock;    /* Hold this lock to read/write status. */
    struct list_elem elem;      /* One relationship in a list. */ 
  };

/* Struct that is stored per process to map a file descriptor to a file. */
struct file_descriptor
  {
    int fd;                 /* An integer that maps to a specific file. */
    struct file *file_;     /* The struct file* that user wants to write to. */
    struct hash_elem elem;  /* Elem for storing our struct in a hash map. */
  };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

In order to maintain users' ability to access different files, we store files
in file entries in a struct and map them to file descriptors that we return to 
the user when they call syscall_open (). A map of file descriptors and open
files is stored in each thread's struct. File descriptors are only unique 
within a single process, yet two file descriptors don't necessarily point to
unique files (two fd's could point to the same file).

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

syscall_read ()
We split this call into two cases; STDIN and all other files. In both cases,
we try to acquire a lock on the file yielding the cpu until we have 
exclusive access.
STDIN represents a file descriptor of 0. All other files are 2 to INT32_MAX.

syscall_write ()
Analogous to syscall_read (), we split this call into two cases; STDOUT and
all other files. In both cases, we keep trying to acquire the lock to gain
exclusive access to the file. We then write the specified number of bytes to
the locked file.
STDOUT represents a file descriptor of 1. All other files are 2 to INT32_MAX.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?



>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

In order to implement wait we created a shared resource that allowed the parent
and child processes to communicate with one another. We created our own shared
resource struct for each parent-child pair that we declared on the heap to
allow it to persist after any one thread in the parent-child pair exited. When
a child process is created, it locks a status lock that it doesn't unlock until
it exits. At the time of exit, the child also accesses the shared resource and
updates its status within the resource that the parent can access if desired.
So when a parent wants to wait on its child, it simply tries to
acquire the child's status lock in the shared resource. This causes the parent
thread to wait without running until it acquires access to the lock, or until
the child exits.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.


Whenever an argument is passed into a system call there is a chance that the
pointer was passed in to bad memory whose address is outside of the user
stack or unmapped. So, we call the functions in vaddr.h and pagedir.h in order
to track errors. If the pointer that the user passes is kernel memory, (above
PHYS_BASE) then the caller exits the thread. Otherwise, if the pointer is not
in kernel memory and not in user memory, which is between the kernel at
PHYS_BASE and the heap below it, then we exit the caller thread. If the memory
is not mapped through a call to pagedir.c:get_page () to the current thread's
virtual memory, then we also exit from the caller thread. 

However, this strategy only checks whether the stack pointer is valid. However,
there's still the potential that a pointer is passed that points to another
pointer (ex. if esp points to a char* or int*) and the pointer underneath is
what we're dereferencing and may run the risk of being NULL. Therefore, if esp
points to another pointer, we actually want to examine the pointer underneath
using the methodology we listed above. We exit with a status of -1 whenever the
memory constraints
are invalid. 

For any buffer supplied by the user, we check whether buffer + offset is valid.
If the user gives us a pointer that represents a buffer that we write to or
read from, we have to ensure that the entire span of that buffer lies within
the user's stack. So, we check the pointer to the buffer + the number of bytes
to which we're going to read and/or write. 

If we try to dereference a NULL pointer in the kernel thread, our strategy will
catch it because the pointer would be outside of the user address space. But if
the user dereferences a NULL pointer, it page faults which causes a kill on the
user that faulted. So we just set its exit status to -1 and then let it die.



---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?


****** PARENT ******

When thread_create () is called by the parent, it passes in a function pointer
to start process along with the process arguments, which are the file name and
the relation to the parent. In thread_create (), the process creates a thread
ID and returns that to the caller. Afterwards, the process sets itself to
schedule start_process with the function arguments, some time after it returns
from thread_create (). Therefore, in between the caller getting the TID from
thread_create () and the process returning from thread_create (), the  child
process can completely run and exit before the parent process executes. This
has many implications. However, the child's scheduling of start_process ()
determines whether the child can load the executable file properly. If it
cannot load the executable, the child will exit. But, because this can happen
before the parent function ever progesses past the retreival of the TID, the
TID can then belong to a child that erred in this way.

So we need to prevent the child from exiting, until the parent knows whether it
is loaded. To do this, we used the relation struct between the parent and child
processes which contains the status of the child and the status of the parent
and a lock which they can use to set their status. The statuses of the parent
and child are one of three values: P_RUNNING, P_LOADING, P_EXITING. When a
parent first creates the relation to pass to the child, the parent's status
(p_status) is P_RUNNING and the child's status (c_status) is P_LOADING. The
parent is going to wait in a loop after calling thread_create () until the
child's status changes to P_LOADING. When this happens, the parent knows that
the child has either exited or is running, so it can properly deal with each
case. 

If the child has exited, then it either failed to load or ran its entire
process. In the first case, the child will set a value in the relation called
w_status to -1, indicating the failure. In the second case, the child will
simply have exited with w_status set to its exit status. To check for this, the
parent will set the TID to the child's TID stored in the relation, which will
be -1 on load failure and unchanged otherwise. The parent can then return the
TID, knowing it's the proper value: -1 on load failure or the TID returned from
thread_create () on exit and still running. 

****** CHILD ******

From the function start_process (), which is scheduled soon after
thread_create (), the child will try to acquire the status lock in its relation
struct as soon as possible. That way, the child can tell the parent whether it
was successful in loading the executable, by setting its c_status to P_EXITED
on load failure and its tid to tid_error on load failure and exiting. Or, in
contrast, by setting its c_status to P_RUNNING on load success. The change in
c_status is how the parent knows to check whether the child has loaded. 

- talk about what we use to communicate
- if someone calls wait, then they hold a lock to check the status of the
child they're waiting on then release the lock, then yield, then acquire the
lock again. In the loop they release, yield, acquire, then check the variable.
And this is very similar to a condition variable but we can't use a condition
variable because the child might signal before the parent waits. 


>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

- relation exists outside of the child and parent
- keep status in w_status variable so if it exits before the parent does, the
parent can still retrieve the status from the variable and if the parent exits
before the child does then the 
If the parent exits then child wants to exit, the child has to free the memory
If the child exits, then the parent wants to exit, the child has to free the
memory

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

We have the syscall_handler use the syscall_args () function which wraps around
pointer arithmetic on the esp stack arguments. This provides us with an easy
way to access the stack arguments and also to validate them for whether or not
the esp points to a valid address.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

One advantage of our file descriptors design is that it provides quick access
and removel of our files based off the int fd. One disadvantage to our design
is that the hashmap implementation requires that we malloc a lot of memory,
which takes a lot of time per allocation. The hash also requires us to rehash
our map when it runs out of space, which is a very expensive operation,
especially since it grows at 2^n. Furthermore, since we don't pose a limit on
the number of file descriptors open, a user can can easily take up all of our
kernel memory by opening up a bunch of file descriptors.


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We used the default tid_t to pid_t mapping since it was simple and clean.


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?