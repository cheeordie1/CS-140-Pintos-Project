       	     +-------------------------+
		     |		   CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

We reviewed Unix filesystem code from CS 110 assignment 1

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

There's an array of 8 sectors in our filesystem. For large files, 7 of these are
indirect sectors, meaning they hold the sector numbers of 256 other data
sectors. The 8th sector is double indirect, which holds the sector numbers of
256 indirect sectors. 
This adds to 512 bytes per sector * (7*256 + 1*256^2) = 34,471,936 bytes

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

We have two inode structure setups, small and large. Inodes representing small
files just hold an array of 8 sectors. Each sector holds 512 bytes. We have such
a simple case because most files are small enough to fit into just a small inode
structure.
Our second inode structure, the large structure, is 7 indirect and 1 doubly
indirect inode. Unfortunately, this is a large jump in size from small to large 
(4096 to 34,471,936), but there is still very little internal fragmentation. We 
allocate sectors as they are needed. For example, say 4096 byte file needs one
more byte. This won't fit in a small file, so all 4097 bytes are read into the
first indirect sector of a large file. There's now an overhead of one sector; 9
to hold the file data, and 1 to inderectly encapsulate the 9 data sectors. There
would be 1 page of overhead for each indirect sector we use and a maximum of 257
pages of overhead attributed to the doubly indirect sector.
This is relatively small overhead considering the theoretical capacity we are
adding to the file..
Also, having such a large file size ensures we have enough space, considering or
entire OS disk partition could fit in one large file.

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In cache.h
----------

The enums are to distinguish the different types of data that could be in the
cache.

enum sector_type
  {
    FILE_DATA = 1,     /* Cached fileblock represents file data. */
    INODE_DATA = 2,    /* Cached fileblock represents inode. */
    INODE_METADATA = 3 /* Cached fileblock represents inode metadata. */
  };

In cache.c
----------
struct buffer_cache
  {
    struct bitmap *used_blocks;
    struct hash cache_segment;
    struct cache_block *used_sectors[CACHE_MAX];
    int cursor;                                  /* Keep track of clock hand */
    int evicting_hand; 
  };

struct cache_block
  {
    struct hash_elem elem;
    block_sector_t sector;
    enum sector_type type;
    char data[BLOCK_SECTOR_SIZE];
    char accessed; /* For reads or writes */
    bool in_use;
    bool dirty; /* For writes only */
  };
---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

We use a clock algorithm to replace cache blocks. The cache is internally stored
as a hash that links sector numbers to buckets of the hash. The clock algorithm
however, circles around a statically sized array. The cursor hand goes through
and will either it will decrement the cache block's usage frequency. The
evicting hand will delete a cache block from the array, return the index it
deleted at. This index will either be a position of a cache block that was freed
since the last time the eviction mechanism was invoked or a cache block whose
usage frequency was decremented to zero by the cursor before.
We chose to represent the clock as an array because it's easy to continuously
loop through an array of 64 elements, and replacing evicted or deleted cache
blocks with new ones is constant time after a position is found. The parallel
hash allows for contant time lookup into the cache when something tries to
access file data. Using both data structures gives us the best of both worlds.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
